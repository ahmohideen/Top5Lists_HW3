{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      //CREATE NEW LIST\n      // case GlobalStoreActionType.ADD_NEW_LIST: {\n      //     return setStore({\n      //         idNamePairs: store.idNamePairs,//this should also be payload?\n      //         currentList: payload,\n      //         newListCounter: store.newListCounter+1,\n      //         isListNameEditActive: false,\n      //         isItemEditActive: false,\n      //         listMarkedForDeletion: null\n      //     })\n      // }\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  //THIS FUNCTION IS FOR ADDING A NEW LIST\n\n\n  store.addNewList = function (name) {\n    async function asyncAddNewList(name) {\n      let pL = {\n        \"name\": name,\n        \"items\": [\"?\", \"?\", \"?\", \"?\", \"?\"]\n      };\n      let payload = JSON.stringify(pL); //idk about this lol\n\n      let response = await api.createTop5List(payload);\n\n      if (response.data.success) {\n        console.log(\"new list has been created in database!\"); //i think we immediately switch into editing mode when we make a new list\n        //gotta use this --> GlobalStoreActionType.ADD_NEW_LIST at some point\n        //we need a payload for this too i think\n        //storeReducer({\n        //type: GlobalStoreActionType.ADD_NEW_LIST,\n        //payload: top5List\n        //});\n      }\n    }\n\n    asyncAddNewList();\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"3FRAmbSo6sFbcN0StEjON5Xn67M=\");","map":{"version":3,"sources":["/Users/hanamohideen/Desktop/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","addNewList","name","asyncAddNewList","pL","JSON","stringify","response","createTop5List","data","success","console","log","changeListName","id","newName","asyncChangeListName","getTop5ListById","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","history","push","addMoveItemTransaction","start","end","transaction","addTransaction","moveItem","temp","items","i","updateCurrentList","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            //CREATE NEW LIST\n            // case GlobalStoreActionType.ADD_NEW_LIST: {\n            //     return setStore({\n            //         idNamePairs: store.idNamePairs,//this should also be payload?\n            //         currentList: payload,\n            //         newListCounter: store.newListCounter+1,\n            //         isListNameEditActive: false,\n            //         isItemEditActive: false,\n            //         listMarkedForDeletion: null\n            //     })\n            // }\n\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    //THIS FUNCTION IS FOR ADDING A NEW LIST\n    store.addNewList = function (name) {\n        async function asyncAddNewList(name) {\n            let pL = { \n                \"name\": name,\n                \"items\": [\"?\", \"?\", \"?\", \"?\", \"?\"]\n            }\n            let payload = JSON.stringify(pL)//idk about this lol\n            let response = await api.createTop5List(payload);\n            if(response.data.success) {\n                console.log(\"new list has been created in database!\");\n                //i think we immediately switch into editing mode when we make a new list\n                //gotta use this --> GlobalStoreActionType.ADD_NEW_LIST at some point\n                \n                //we need a payload for this too i think\n                //storeReducer({\n                    //type: GlobalStoreActionType.ADD_NEW_LIST,\n                    //payload: top5List\n                //});\n            }\n        }\n\n        asyncAddNewList();\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.name = newName;\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        top5List: top5List\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getTop5ListPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: top5List\n                    });\n                    store.history.push(\"/top5list/\" + top5List._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"]},"metadata":{},"sourceType":"module"}