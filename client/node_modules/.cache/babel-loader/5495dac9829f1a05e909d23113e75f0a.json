{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  ADD_NEW_LIST: \"ADD_NEW_LIST\",\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      //CREATE NEW LIST\n      case GlobalStoreActionType.ADD_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            //this should also be payload?\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter + 1,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // LIST UPDATE OF ITS NAME\n\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  //THIS FUNCTION IS FOR ADDING A NEW LIST\n\n\n  store.addNewList = function () {\n    async function asyncAddNewList() {\n      let payload = {\n        \"name\": \"Untitled\" + store.newListCounter,\n        \"items\": [\"?\", \"?\", \"?\", \"?\", \"?\"]\n      };\n      let response = await api.createTop5List(payload);\n      console.log(response);\n\n      if (response.data.success) {\n        console.log(\"new list has been created in database!\");\n        let top5List = response.data.top5List;\n        let temp = {\n          _id: response.data.top5List[\"_id\"],\n          name: response.data.top5List[\"name\"]\n        };\n        console.log(\"Temp payload: \" + temp);\n        console.log(store.idNamePairs);\n        let tempArray = store.idNamePairs;\n        tempArray.push(temp);\n        console.log(temp); //i think we immediately switch into editing mode when we make a new list\n        //gotta use this --> GlobalStoreActionType.ADD_NEW_LIST at some point\n        //we need a payload for this too i think\n\n        storeReducer({\n          type: GlobalStoreActionType.ADD_NEW_LIST,\n          payload: {\n            idNamePairs: tempArray,\n            top5List: null\n          }\n        });\n        store.setCurrentList(temp[\"_id\"]);\n      }\n    }\n\n    asyncAddNewList();\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addUpdateItemTransaction = function (id, oldText, newText) {\n    let transaction = new ChangeItem_Transaction(store, id, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateItem = function (id, text) {\n    store.currentList.items[id] = text;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"3FRAmbSo6sFbcN0StEjON5Xn67M=\");","map":{"version":3,"sources":["/Users/hanamohideen/Desktop/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","ChangeItem_Transaction","GlobalStoreContext","GlobalStoreActionType","ADD_NEW_LIST","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","addNewList","asyncAddNewList","response","createTop5List","console","log","data","success","temp","_id","name","tempArray","push","setCurrentList","changeListName","id","newName","asyncChangeListName","getTop5ListById","updateList","updateTop5ListById","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","asyncSetCurrentList","history","addMoveItemTransaction","start","end","transaction","addTransaction","addUpdateItemTransaction","oldText","newText","moveItem","items","i","updateCurrentList","updateItem","text","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    ADD_NEW_LIST: \"ADD_NEW_LIST\",\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            //CREATE NEW LIST\n            case GlobalStoreActionType.ADD_NEW_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,//this should also be payload?\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter+1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    //THIS FUNCTION IS FOR ADDING A NEW LIST\n    store.addNewList = function () {\n        async function asyncAddNewList() {\n            let payload = { \n                \"name\": \"Untitled\"+store.newListCounter,\n                \"items\": [\"?\", \"?\", \"?\", \"?\", \"?\"]\n            }\n            let response = await api.createTop5List(payload);\n            console.log(response);\n            if(response.data.success) {\n                console.log(\"new list has been created in database!\");\n                let top5List = response.data.top5List;\n                let temp = {\n                    _id: response.data.top5List[\"_id\"],\n                    name: response.data.top5List[\"name\"]\n                }\n                console.log(\"Temp payload: \"+temp);\n                console.log(store.idNamePairs);\n                let tempArray = store.idNamePairs;\n                tempArray.push(temp);\n                console.log(temp);\n                //i think we immediately switch into editing mode when we make a new list\n                //gotta use this --> GlobalStoreActionType.ADD_NEW_LIST at some point\n                \n                //we need a payload for this too i think\n                storeReducer({\n                    type: GlobalStoreActionType.ADD_NEW_LIST,\n                    payload: {\n                        idNamePairs: tempArray,\n                        top5List: null\n                    }\n                });\n                store.setCurrentList(temp[\"_id\"]);\n            }\n        }\n\n        asyncAddNewList();\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.name = newName;\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        top5List: top5List\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getTop5ListPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: top5List\n                    });\n                    store.history.push(\"/top5list/\" + top5List._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    store.addUpdateItemTransaction = function (id, oldText, newText) {\n        let transaction = new ChangeItem_Transaction(store, id, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    store.updateItem = function(id, text) {\n        store.currentList.items[id] = text;\n        store.updateCurrentList();\n    }\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"]},"metadata":{},"sourceType":"module"}